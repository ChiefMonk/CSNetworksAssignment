package uct.cs.networks.ui;

import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import com.formdev.flatlaf.FlatLightLaf;
import java.awt.Image;
import java.util.ArrayList;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import uct.cs.networks.interfaces.IMessage;
import java.io.*;
import java.net.Socket;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

import uct.cs.networks.enums.*;
import uct.cs.networks.messages.*;
import uct.cs.networks.models.SystemUser;
import uct.cs.networks.proto.MessageProtocol;
import uct.cs.networks.proto.ProtocolBody;
import uct.cs.networks.utils.AESEncryption;
import uct.cs.networks.utils.EncryptionHelper;
import uct.cs.networks.utils.HelperUtils;
import uct.cs.networks.utils.MessageFactory;

/**
 * The ChatClient is the main class for the Desktop Application.
 * 
 * @author Shaylin Chetty (CHTSHA042@myuct.ac.za)
 * @author Chipo Hamayobe (HMYCHI001@myuct.ac.za)
 * @author Orefile Morule (MRLORE001@myuct.ac.za)
 * @author Enock Shezi (SHZENO001@myuct.ac.za)
 * 
 * @version 1.0.1
 * @since 2023-09-21
 */
public class ChatClient extends javax.swing.JFrame {

    // static and final parameters
    private static final String TITLE = "- SecureChatSystem CLIENT : Demonstrating Secure Network Communication with Cryptographic Functions -";
    private static final String ERROR_DEFAULT_TITLE = "Invalid Error Occurred";

    private final JFileChooser _fileChooser;

    private String _ipAddress = "127.0.0.1";
    private int _portNumber = 4026;

    private String _passPhrase;

    private SystemUser _currentUser;
    private Map<Integer, SystemUser> _listOfUsers;

    private List<String> _sendMessageIdList;
    private List<String> _receivedMessageIdList;

    private ObjectOutputStream _outputStream;
    private ObjectInputStream _inputStream;

    private Socket _socket;

    /**
     * Creates new form ToolGUI
     */
    public ChatClient() {
        super(TITLE);
        initComponents();
        this.setResizable(true);
        this.setVisible(true);
        this.setTitle("<html><body><center>" + TITLE + "</center></body></html>");

        this.setDefaultCloseOperation(javax.swing.JFrame.DO_NOTHING_ON_CLOSE);
        this.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent windowEvent) {
                ButtonExitApplicationActionPerformed(null);
            }
        });

        // Create a button group to group the radio buttons
        ButtonGroup buttonGroup = new ButtonGroup();
        buttonGroup.add(RadioUserServer);
        buttonGroup.add(RadioUser1);
        buttonGroup.add(RadioUser2);
        buttonGroup.add(RadioUser3);
        buttonGroup.add(RadioUser4);
        buttonGroup.add(RadioUser5);

        onLoading();

        _sendMessageIdList = new ArrayList<>();
        _receivedMessageIdList = new ArrayList<>();

        _listOfUsers = new HashMap<Integer, SystemUser>();

        _fileChooser = new JFileChooser();
        _fileChooser.setFileFilter(new FileNameExtensionFilter("Image files", "jpg", "jpeg", "png", "gif"));
        _fileChooser.setCurrentDirectory(new java.io.File("."));
        _fileChooser.setDialogTitle("Select an Image File");

        ComboBoxMessageTypeActionPerformed(null);
        jMenuItem1ActionPerformed(null);
    }

    private void onLoading() {
        PanelMain.setVisible(false);
        processUserList(null);
    }

    private void onSessionStart() {
        PanelMain.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        PanelMain = new javax.swing.JPanel();
        PanelInputs = new javax.swing.JPanel();
        Labelmage = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        RadioUserServer = new javax.swing.JRadioButton();
        jLabel9 = new javax.swing.JLabel();
        RadioUser1 = new javax.swing.JRadioButton();
        RadioUser2 = new javax.swing.JRadioButton();
        RadioUser3 = new javax.swing.JRadioButton();
        RadioUser4 = new javax.swing.JRadioButton();
        RadioUser5 = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaOutput = new javax.swing.JTextArea();
        ButtonLoadImage = new javax.swing.JButton();
        PanelOutputEntailAndJustify = new javax.swing.JPanel();
        textFieldInputMessage = new javax.swing.JTextField();
        ButtonSendMessage = new javax.swing.JButton();
        ComboBoxMessageType = new javax.swing.JComboBox<>();
        PanelOutputExplanations = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        textAreaOutputLogs = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        MenuItemServerSettings = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 100, Short.MAX_VALUE));
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 100, Short.MAX_VALUE));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        PanelMain.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true));

        PanelInputs.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 204, 255), 1, true));
        PanelInputs.setAlignmentX(1.0F);
        PanelInputs.setAlignmentY(1.0F);

        RadioUserServer.setText("The Sever");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel9.setText("List of Users");

        RadioUser1.setText("User 1");

        RadioUser2.setText("User 2");

        RadioUser3.setText("User 3");

        RadioUser4.setText("User 4");

        RadioUser5.setText("User 5");

        textAreaOutput.setEditable(false);
        textAreaOutput.setColumns(20);
        textAreaOutput.setRows(1000);
        textAreaOutput.setFocusable(false);
        jScrollPane1.setViewportView(textAreaOutput);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel9)
                                        .addComponent(RadioUserServer)
                                        .addComponent(RadioUser1)
                                        .addComponent(RadioUser2)
                                        .addComponent(RadioUser3)
                                        .addComponent(RadioUser4)
                                        .addComponent(RadioUser5))
                                .addGap(31, 31, 31)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 903, Short.MAX_VALUE)
                                .addContainerGap()));
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(RadioUserServer)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(RadioUser1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(RadioUser2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(RadioUser3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(RadioUser4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(RadioUser5)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE));

        ButtonLoadImage.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        ButtonLoadImage.setText("Load Image");
        ButtonLoadImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonLoadImageActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelInputsLayout = new javax.swing.GroupLayout(PanelInputs);
        PanelInputs.setLayout(PanelInputsLayout);
        PanelInputsLayout.setHorizontalGroup(
                PanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(PanelInputsLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(PanelInputsLayout
                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(Labelmage, javax.swing.GroupLayout.PREFERRED_SIZE, 281,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelInputsLayout
                                                .createSequentialGroup()
                                                .addComponent(ButtonLoadImage, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                        159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(49, 49, 49)))
                                .addContainerGap()));
        PanelInputsLayout.setVerticalGroup(
                PanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(PanelInputsLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(
                                        PanelInputsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(PanelInputsLayout.createSequentialGroup()
                                                        .addComponent(Labelmage, javax.swing.GroupLayout.PREFERRED_SIZE,
                                                                238, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addGap(18, 18, 18)
                                                        .addComponent(ButtonLoadImage))
                                                .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap()));

        PanelOutputEntailAndJustify
                .setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 204, 255)));

        textFieldInputMessage.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        ButtonSendMessage.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        ButtonSendMessage.setText("Send Message");
        ButtonSendMessage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonSendMessageActionPerformed(evt);
            }
        });

        ComboBoxMessageType.setModel(new javax.swing.DefaultComboBoxModel<>(
                new String[] { "1. Session Start Message", "2. Verify Public Certificate", "3. Send Text Message",
                        "4. Send Image with Caption Message", "5. Session End Message" }));
        ComboBoxMessageType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboBoxMessageTypeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PanelOutputEntailAndJustifyLayout = new javax.swing.GroupLayout(
                PanelOutputEntailAndJustify);
        PanelOutputEntailAndJustify.setLayout(PanelOutputEntailAndJustifyLayout);
        PanelOutputEntailAndJustifyLayout.setHorizontalGroup(
                PanelOutputEntailAndJustifyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(PanelOutputEntailAndJustifyLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(ComboBoxMessageType, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(textFieldInputMessage)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(ButtonSendMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 159,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap()));
        PanelOutputEntailAndJustifyLayout.setVerticalGroup(
                PanelOutputEntailAndJustifyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
                                PanelOutputEntailAndJustifyLayout.createSequentialGroup()
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(ComboBoxMessageType, javax.swing.GroupLayout.PREFERRED_SIZE, 31,
                                                javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(15, 15, 15))
                        .addGroup(PanelOutputEntailAndJustifyLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(PanelOutputEntailAndJustifyLayout
                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(ButtonSendMessage, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(textFieldInputMessage, javax.swing.GroupLayout.DEFAULT_SIZE, 42,
                                                Short.MAX_VALUE))
                                .addContainerGap(8, Short.MAX_VALUE)));

        PanelOutputExplanations
                .setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 204, 255)));

        textAreaOutputLogs.setEditable(false);
        textAreaOutputLogs.setColumns(20);
        textAreaOutputLogs.setRows(5);
        textAreaOutputLogs.setFocusable(false);
        jScrollPane7.setViewportView(textAreaOutputLogs);

        jLabel8.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel8.setText("Output and Logs");

        javax.swing.GroupLayout PanelOutputExplanationsLayout = new javax.swing.GroupLayout(PanelOutputExplanations);
        PanelOutputExplanations.setLayout(PanelOutputExplanationsLayout);
        PanelOutputExplanationsLayout.setHorizontalGroup(
                PanelOutputExplanationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(PanelOutputExplanationsLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(PanelOutputExplanationsLayout
                                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane7)
                                        .addGroup(PanelOutputExplanationsLayout.createSequentialGroup()
                                                .addComponent(jLabel8)
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                .addContainerGap()));
        PanelOutputExplanationsLayout.setVerticalGroup(
                PanelOutputExplanationsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(PanelOutputExplanationsLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                                .addContainerGap()));

        javax.swing.GroupLayout PanelMainLayout = new javax.swing.GroupLayout(PanelMain);
        PanelMain.setLayout(PanelMainLayout);
        PanelMainLayout.setHorizontalGroup(
                PanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(PanelMainLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(PanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(PanelOutputEntailAndJustify, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(PanelOutputExplanations, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(PanelInputs, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap()));
        PanelMainLayout.setVerticalGroup(
                PanelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(PanelMainLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(PanelInputs, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(PanelOutputEntailAndJustify, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(PanelOutputExplanations, javax.swing.GroupLayout.DEFAULT_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap()));

        MenuItemServerSettings.setText("File");

        jMenuItem1.setText("Server Authentication");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        MenuItemServerSettings.add(jMenuItem1);

        jMenuBar1.add(MenuItemServerSettings);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(PanelMain, javax.swing.GroupLayout.Alignment.TRAILING,
                                javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
                                Short.MAX_VALUE));
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(PanelMain, javax.swing.GroupLayout.DEFAULT_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private SystemUser findByID(String id) {
        for (SystemUser user : _listOfUsers.values()) {
            if (user.getId().equals(id)) {
                return user;
            }
        }
        return null;
    }

    private void sendMessage(MessageProtocol message) {
        try {
            if (message == null)
                return;

            _outputStream.writeObject(message);
            _outputStream.flush();

            _sendMessageIdList.add(message.getId());
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    private void processReceivedMessage(MessageProtocol messageObject) {

        if (messageObject == null)
            return;

        if (_receivedMessageIdList == null || _receivedMessageIdList.isEmpty())
            _receivedMessageIdList = new ArrayList<>();

        try {
            MessageProtocol message = MessageFactory.getMessage(messageObject);
            appendTextAreaOutputLogs(message);

            _receivedMessageIdList.add(message.getId());
            var cipherBody = message.getCipherBody().toString();

            // Message if for the server
            if (message.getType() == MessageType.BroadcastUserList) {
                // decrypt
                var plainBody = cipherBody;
                ProtocolBody messageBody = (ProtocolBody) HelperUtils.convertBase64StringToProtocolBody(plainBody);
                var actualMessage = (BroadcastSystemUsersMessage) messageBody.getMessage();

                // if(!validateHashAgainstMessage(actualMessage,
                // messageBody.getMessageDigest()))
                // return;

                appendTextAreaLive(actualMessage);
                processUserList(actualMessage.getUserList());
            }

            if (message.getType() == MessageType.SessionStart) {
                cipherBody = EncryptionHelper.decryptwithPrivateKey(cipherBody, _currentUser, _passPhrase); // decrypt
                var plainBody = cipherBody;
                MessageProtocol messageProtocol = (MessageProtocol) HelperUtils
                        .convertBase64StringToMessageProtocol(plainBody);
                ProtocolBody messageBody = (ProtocolBody) HelperUtils.convertBase64StringToProtocolBody(plainBody);
                var actualMessage = (SessionStartMessage) messageBody.getMessage();

                // if(!validateHashAgainstMessage(actualMessage,
                // messageBody.getMessageDigest()))
                // return;

                appendTextAreaLive(actualMessage);
                // Add session key to user in userList
                AESEncryption aesEncryption = new AESEncryption();
                String key = null;
                try {
                    key = aesEncryption.serializeKeyToString(actualMessage.getSessionKey()); // add session key from
                                                                                             // actual message

                } catch (Exception e) {
                    e.printStackTrace();
                }
                findByID(messageProtocol.getSender()).setSecretKey(key); // Find user

            }

            if (message.getType() == MessageType.SessionEnd) {
                cipherBody = EncryptionHelper.decryptWithSharedKey(cipherBody, findByID(message.getSender()));
                var plainBody = cipherBody;
                ProtocolBody messageBody = (ProtocolBody) HelperUtils.convertBase64StringToProtocolBody(plainBody);
                var actualMessage = (SessionEndMessage) messageBody.getMessage();

                // if(!validateHashAgainstMessage(actualMessage,
                // messageBody.getMessageDigest()))
                // return;

                appendTextAreaLive(actualMessage);
            }

            if (message.getType() == MessageType.ValidateCertResponse) {
                // decrypt
                var plainBody = cipherBody;
                ProtocolBody messageBody = (ProtocolBody) HelperUtils.convertBase64StringToProtocolBody(plainBody);
                var actualMessage = (ValidateCertMessageResponse) messageBody.getMessage();

                // if(!validateHashAgainstMessage(actualMessage,
                // messageBody.getMessageDigest()))
                // return;

                appendTextAreaLive(actualMessage);
            }

            if (message.getType() == MessageType.SendText) {
                cipherBody = EncryptionHelper.decryptWithSharedKey(cipherBody, findByID(message.getSender()));
                var plainBody = cipherBody;
                ProtocolBody messageBody = (ProtocolBody) HelperUtils.convertBase64StringToProtocolBody(plainBody);
                var actualMessage = (SendTextMessage) messageBody.getMessage();

                // if(!validateHashAgainstMessage(actualMessage,
                // messageBody.getMessageDigest()))
                // return;

                appendTextAreaLive(actualMessage);
            }

            if (message.getType() == MessageType.SendImageWithText) {
                cipherBody = EncryptionHelper.decryptWithSharedKey(cipherBody, findByID(message.getSender()));
                var plainBody = cipherBody;
                ProtocolBody messageBody = (ProtocolBody) HelperUtils.convertBase64StringToProtocolBody(plainBody);
                var actualMessage = (SendImageWithTextMessage) messageBody.getMessage();

                // if(!validateHashAgainstMessage(actualMessage,
                // messageBody.getMessageDigest()))
                // return;

                appendTextAreaLive(actualMessage);
                setImageIconToLabel(byteArrayToImageIcon(actualMessage.getImageData()));
            }
        } catch (IOException | ClassNotFoundException ex) {
            logException(ex);
        }
    }

    private boolean validateHashAgainstMessage(IMessage message, String hashDigest) {
        if (hashDigest == null || hashDigest.isBlank())
            return true;

        return (EncryptionHelper.createMessageDigest(message).equals(hashDigest));
    }

    private void processUserList(List<SystemUser> userList) {
        RadioUserServer.setVisible(false);
        RadioUser1.setVisible(false);
        RadioUser2.setVisible(false);
        RadioUser3.setVisible(false);
        RadioUser4.setVisible(false);
        RadioUser5.setVisible(false);

        boolean radioUser2Set = false;
        boolean radioUser3Set = false;
        boolean radioUser4Set = false;
        boolean radioUser5Set = false;

        _listOfUsers = new HashMap<Integer, SystemUser>();

        if (userList == null || userList.isEmpty())
            return;

        for (SystemUser user : userList) {
            if (user.getId().equals(HelperUtils.SERVER_ID)) {
                RadioUserServer.setVisible(true);
                RadioUserServer.setText(user.getName());
                _listOfUsers.put(0, user);
                continue;
            }

            if (user.getId().equals(_currentUser.getId())) {
                RadioUser1.setVisible(true);
                RadioUser1.setText(String.format("%s (you)", user.getName()));
                _listOfUsers.put(1, user);
                continue;
            }

            if (!radioUser2Set) {
                RadioUser2.setVisible(true);
                RadioUser2.setText(user.getName());
                radioUser2Set = true;
                _listOfUsers.put(2, user);
                continue;
            }

            if (!radioUser3Set) {
                RadioUser3.setVisible(true);
                RadioUser3.setText(user.getName());
                radioUser3Set = true;
                _listOfUsers.put(3, user);
                continue;
            }

            if (!radioUser4Set) {
                RadioUser4.setVisible(true);
                RadioUser4.setText(user.getName());
                radioUser4Set = true;
                _listOfUsers.put(4, user);
                continue;
            }

            if (!radioUser5Set) {
                RadioUser5.setVisible(true);
                RadioUser5.setText(user.getName());
                radioUser5Set = true;
                _listOfUsers.put(5, user);
                continue;
            }
        }

        RadioUserServer.setSelected(true);
    }

    private SystemUser getSelectedUser() {
        if (RadioUserServer.isSelected())
            return _listOfUsers.get(0);

        if (RadioUser1.isSelected())
            return _listOfUsers.get(1);

        if (RadioUser2.isSelected())
            return _listOfUsers.get(2);

        if (RadioUser3.isSelected())
            return _listOfUsers.get(3);

        if (RadioUser4.isSelected())
            return _listOfUsers.get(4);

        if (RadioUser5.isSelected())
            return _listOfUsers.get(5);

        return null;
    }

    // Send Messages
    private void ButtonSendMessageActionPerformed(java.awt.event.ActionEvent evt) {

        String errorTitle = "Message Type Error";

        var messageType = getMessageType(String.valueOf(ComboBoxMessageType.getSelectedItem()));
        MessageProtocol message = null;
        var receiver = getSelectedUser();

        if (receiver == null || RadioUser1.isSelected()) {
            showErrorPopupMessage(errorTitle, "Please select a valid user to send the message to. Not yourself");
            return;
        }

        if (messageType == MessageType.ValidateCertRequest) {
            if (!RadioUserServer.isSelected()) {
                showErrorPopupMessage(errorTitle, "Please select a 'The Server' for such type of message");
                return;
            }
        } else {
            if (RadioUserServer.isSelected() || RadioUser1.isSelected()) {
                showErrorPopupMessage(errorTitle,
                        "Please select a valid user to send the message to. Not the server or yourself");
                return;
            }
        }

        try {
            // Message if for the server
            if (messageType == MessageType.SessionStart) {
                message = MessageFactory.CreateMessage(_currentUser, receiver, messageType, null, null);
            }

            if (messageType == MessageType.SessionEnd) {
                message = MessageFactory.CreateMessage(_currentUser, receiver, messageType, null, null);
            }

            if (messageType == MessageType.ValidateCertRequest) {
                message = MessageFactory.CreateMessage(_currentUser, receiver, messageType, null, null);
            }
            if (messageType == MessageType.SendText || messageType == MessageType.SendImageWithText) {
                String textData = textFieldInputMessage.getText();

                if (textData == null || textData.isBlank()) {
                    showErrorPopupMessage(errorTitle, "Please enter the Text Message to send to the selected user");
                    return;
                }

                if (messageType == MessageType.SendText) {
                    message = MessageFactory.CreateMessage(_currentUser, receiver, messageType, null, textData);
                }

                if (messageType == MessageType.SendImageWithText) {
                    if (!_fileChooser.isFileSelectionEnabled() || _fileChooser.getSelectedFile() == null
                            || !_fileChooser.getSelectedFile().isFile()) {
                        showErrorPopupMessage(errorTitle, "Please select an Image File to send to the selected user");
                        return;
                    }

                    Path imagePath = Paths.get(_fileChooser.getSelectedFile().getAbsolutePath());

                    if (!Files.exists(imagePath)) {
                        showErrorPopupMessage(errorTitle, "Please select an Image File to send to the selected user");
                        return;
                    }

                    message = MessageFactory.CreateMessage(_currentUser, receiver, messageType,
                            Files.readAllBytes(imagePath), textData);
                }
            }
        } catch (IOException ex) {
            logException(ex);
        }

        if (message == null) {
            showErrorPopupMessage(errorTitle, "Please select a valid message type and user to send the message");
            return;
        }

        if (_outputStream == null)
            startListener();

        sendMessage(message);

        textFieldInputMessage.setText("");
        textFieldInputMessage.setEnabled(true);
        ButtonLoadImage.setVisible(true);
    }

    private void ButtonLoadImageActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_ButtonLoadImageActionPerformed

        if (_fileChooser.showOpenDialog(null) != JFileChooser.APPROVE_OPTION)
            return;

        // Load an image using ImageIcon
        ImageIcon imageIcon = new ImageIcon(_fileChooser.getSelectedFile().getAbsolutePath()); // Replace with your //
                                                                                               // image file path
        setImageIconToLabel(imageIcon);
    }// GEN-LAST:event_ButtonLoadImageActionPerformed

    private void ComboBoxMessageTypeActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_ComboBoxMessageTypeActionPerformed

        var messageType = getMessageType(String.valueOf(ComboBoxMessageType.getSelectedItem()));

        textFieldInputMessage.setEnabled(false);
        ButtonLoadImage.setVisible(false);

        if (messageType == MessageType.SendText || messageType == MessageType.SendImageWithText) {
            textFieldInputMessage.setEnabled(true);
            ButtonLoadImage.setVisible(true);
        }

    }// GEN-LAST:event_ComboBoxMessageTypeActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItem1ActionPerformed

        var authForm = new ChatClientAuth(this);

        authForm.setVisible(true);
        var authUser = authForm.getSystemUserAuth();
        authForm.dispose();

        if (authUser != null) {
            _currentUser = new SystemUser(authUser);
            _passPhrase = authUser.getKeyPassphrase();
            _ipAddress = authUser.getServerIpAddress();
            _portNumber = authUser.getPortNumber();

            startListener();
            try {
                MessageProtocol message = MessageFactory.CreateMessage(_currentUser, null, MessageType.SystemUserAuth,
                        null, null);
                sendMessage(message);
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
    }
    // GEN-LAST:event_jMenuItem1ActionPerformed

    private void ButtonExitApplicationActionPerformed(java.awt.event.ActionEvent evt) {
        int reply = JOptionPane.showConfirmDialog(this, "Are you sure you would like to Exit the Application",
                "Exit the Application", JOptionPane.YES_NO_OPTION);
        if (reply == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }

    private void logException(Exception ex) {
        ex.printStackTrace();
        Logger.getLogger(getClass().getName()).log(Level.SEVERE, ex.getMessage(), ex);
    }

    private void showErrorPopupMessage(String title, String errorMessage) {
        if (errorMessage == null || errorMessage.isEmpty())
            return;

        JOptionPane.showMessageDialog(this, errorMessage, title, JOptionPane.ERROR_MESSAGE);
    }

    private void setImageIconToLabel(ImageIcon imageIcon) {
        if (imageIcon == null)
            return;

        int imageWith = Labelmage.getHeight() - 1;
        Image scaledImage = imageIcon.getImage().getScaledInstance(imageWith, imageWith, Image.SCALE_SMOOTH);
        Labelmage.setIcon(new ImageIcon(scaledImage));
    }

    private ImageIcon byteArrayToImageIcon(byte[] imageData) throws IOException {
        // Convert the byte array to an Image
        ByteArrayInputStream inputStream = new ByteArrayInputStream(imageData);
        java.awt.Image image = ImageIO.read(inputStream);

        // Create an ImageIcon from the Image
        return new ImageIcon(image);
    }

    private void appendTextAreaLive(IMessage message) {
        if (message == null)
            return;

        appendTextAreaLive(message.toClientString());
    }

    private void appendTextAreaLive(String message) {
        textAreaOutput.append(String.format("IN:%s\n", message));
        appendTextAreaOutputLogs(message);
    }

    private void appendTextAreaOutputLogs(MessageProtocol message) {
        if (message == null)
            return;
        appendTextAreaOutputLogs(message.toClientString());
    }

    private void appendTextAreaOutputLogs(String message) {
        textAreaOutputLogs.append(String.format("IN:%s\n", message));
    }

    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="ERROR MESSAGES">

    /**
     * shows a message popup
     * 
     * @param title
     * @param errorMessage
     * @param exception
     */
    private void showErrorPopupMessage(String title, String errorMessage, Exception exception) {
        if (errorMessage == null || errorMessage.isEmpty())
            return;

        if (title == null || title.isEmpty())
            title = ERROR_DEFAULT_TITLE;

        Logger.getLogger(this.getName()).log(Level.SEVERE, title, exception);
        JOptionPane.showMessageDialog(this, String.format("%s\n%s", errorMessage, exception.getMessage()) + "", title,
                JOptionPane.ERROR_MESSAGE);
    }

    // </editor-fold>

    private static MessageType getMessageType(String selection) {
        if (selection.startsWith("1."))
            return MessageType.SessionStart;

        if (selection.startsWith("2."))
            return MessageType.ValidateCertRequest;

        if (selection.startsWith("3."))
            return MessageType.SendText;

        if (selection.startsWith("4."))
            return MessageType.SendImageWithText;

        if (selection.startsWith("5."))
            return MessageType.SessionEnd;

        return MessageType.Unknown;
    }

    private void startListener() {
        try {
            // Connect to the server
            _socket = new Socket(_ipAddress, _portNumber);

            // Create reader and writer
            _outputStream = new ObjectOutputStream(_socket.getOutputStream());
            _inputStream = new ObjectInputStream(_socket.getInputStream());

            onSessionStart();

            // Start a new thread for receiving messages
            Thread receiveThread = new Thread(() -> {
                try {
                    Object object;
                    while ((object = _inputStream.readObject()) != null) {
                        MessageProtocol message = MessageFactory.getMessage(object);
                        processReceivedMessage(message);
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(ChatClient.class.getName()).log(Level.SEVERE, null, ex);
                }
            });
            receiveThread.start();

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        boolean isLookSet = false;

        try {
            FlatLightLaf.setup();
            javax.swing.UIManager.setLookAndFeel(new FlatLightLaf());
            isLookSet = true;

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            Logger.getLogger(ChatClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        if (!isLookSet) {
            try {
                for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                    if ("Nimbus".equals(info.getName())) {
                        javax.swing.UIManager.setLookAndFeel(info.getClassName());
                        break;
                    }
                    javax.swing.UIManager.setLookAndFeel(javax.swing.UIManager.getSystemLookAndFeelClassName());
                }
            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException
                    | javax.swing.UnsupportedLookAndFeelException ex) {
                Logger.getLogger(ChatClient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            }
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ChatClient().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonLoadImage;
    private javax.swing.JButton ButtonSendMessage;
    private javax.swing.JComboBox<String> ComboBoxMessageType;
    private javax.swing.JLabel Labelmage;
    private javax.swing.JMenu MenuItemServerSettings;
    private javax.swing.JPanel PanelInputs;
    private javax.swing.JPanel PanelMain;
    private javax.swing.JPanel PanelOutputEntailAndJustify;
    private javax.swing.JPanel PanelOutputExplanations;
    private javax.swing.JRadioButton RadioUser1;
    private javax.swing.JRadioButton RadioUser2;
    private javax.swing.JRadioButton RadioUser3;
    private javax.swing.JRadioButton RadioUser4;
    private javax.swing.JRadioButton RadioUser5;
    private javax.swing.JRadioButton RadioUserServer;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTextArea textAreaOutput;
    private javax.swing.JTextArea textAreaOutputLogs;
    private javax.swing.JTextField textFieldInputMessage;
    // End of variables declaration//GEN-END:variables
}
